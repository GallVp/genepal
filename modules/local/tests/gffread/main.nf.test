nextflow_process {

    name "Test Process GFFREAD"
    script "../../../nf-core/gffread/main.nf"
    config "./nextflow.config"
    process "GFFREAD"

    tag "gffread"
    tag "modules_nfcore"
    tag "modules"

    test("filter by length") {

        when {
            params {
                gffread_params = '--no-pseudo --keep-genes -C -l 72'
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file("$baseDir" + '/modules/local/tests/gffread/testdata/t.gff', checkIfExists: true)
                ]
                input[1] = []
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert file(process.out.gffread_gff[0][1]).text.contains('gene19851') },
                { assert file(process.out.gffread_gff[0][1]).text.contains('gene19851.t1') },
                { assert ! file(process.out.gffread_gff[0][1]).text.contains('gene19851.t2') } // This is the only transcript which is being knocked out
            )
        }

    }

    test("filter by length -- case II") {

        when {
            params {
                gffread_params = '--no-pseudo --keep-genes -C -l 72'
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file("$baseDir" + '/modules/local/tests/gffread/testdata/t2.gff', checkIfExists: true)
                ]
                input[1] = []
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with (file(process.out.gffread_gff[0][1]).text) {
                assert contains('P005ME_h2_v2.g24')

                // The following should have been excluded if CDS length was considered by gffread
                assert contains('P005ME_h2_v2.g14880')
                assert contains('P005ME_h2_v2.g19822')
                assert contains('P005ME_h2_v2.g8694')
            }
        }

    }

    test("Exclude models with in-frame stop codons") {

        setup {
            run("GUNZIP") {
                script "../../../nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file("$baseDir" + '/modules/local/tests/gffread/testdata/inframe.stop.fa.gz', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            params {
                gffread_params = '-J'
            }
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file("$baseDir" + '/modules/local/tests/gffread/testdata/inframe.stop.gff', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip.map { meta, fa -> fa }
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with (file(process.out.gffread_gff[0][1]).text) {
                assert contains('g33587')

                // The following should have been excluded if in-frame stop codons were considered by gffread
                assert ! contains('g33586')
            }
        }

    }

}
